#!/usr/bin/env python

"""
Check STAMP control for expected variants.
"""

import os
import sys
import datetime
import openpyxl
import operator
import re
import sqlite3
import time
import wx
import wx.lib.agw.flatnotebook as fnb
import xlsxwriter
from collections import defaultdict
from argparse import ArgumentParser

VERSION="1.5"
BUILD="170516"

# REVISION HISTORY
# 170516 - Change CNV value to mean-z instead of copies
# 170418 - Add CNVs to HD753 control qc
# 170112 - Fix runnum lstrip to work for STAMP300
# 160916 - Only highlight missing expected variants
# 160713
# * Hide other variants
# * Add gray background to non-horizon, other variants
# * Add HD753_stampV2 to CONTROL_LIST
# * Use STAMP V1 or STAMP V2 variants depending on script name
# * Remove extraneous fields from database (dbSNP, COSMIC, strand)
# * Include ref, var fields in spreadsheet but hide columns; this
#   makes generating initial truth data easier

def getScriptPath():
    return os.path.dirname(os.path.realpath(sys.argv[0]))

def get_ctrl_version():
    """Get stamp control version to use from script name.  
    ie. Use V2 control variants if V2 in script name
    """
    scriptname = os.path.basename(sys.argv[0])
    version = ''
    if 'V2' in scriptname:
        version = 'V2'
    return version

#----common.py----------------------------------------------------------------

def getScriptPath():
    return os.path.dirname(os.path.realpath(sys.argv[0]))

DEFAULT_DOCS_DIR = os.path.abspath(os.path.join(getScriptPath(), 
                           "..", "docs"))
DEFAULT_DATA_DIR = os.path.abspath(os.path.join(getScriptPath(), 
                           "..", "data"))
CONTROL_LIST = {'HD753':'HD753', # stampV1
                'TruQ3':'TruQ3', # stampV1
                'HD753_stampV2':'HD753', # stampV2
                'TruQ3_stampV2':'TruQ3'} # stampV2

# Reference files for expected mutations and fusions
# Replace 'CONTROL' in name with keys from CONTROL_LIST
# to create reference file name
#   Ex: for TruQ3_stampV2, the TruQ3 truth file is
#       truths_TruQ3_stampV2.txt

REFFILE_LIST = {
    "TRUTHFILE": "truths_CONTROL.txt",
    "FUSIONFILE": "truths_fusions_CONTROL.txt",
    "CNVFILE": "truths_cnvs_CONTROL.txt",
    'SCHEMAFILE': "stampQC_schema.sql",
    'SPREADSHEET': "stampQC_CONTROL.xlsx",
    'SQLITEDB': "stampQC_CONTROL.db",
}
VARTYPES = ['mutation', 'fusion', 'cnv']
FORMAT_VARTYPE = {
  'format':{
    'mutation':'mutation',
    'fusion':'fusion',
    'cnv':'CNV',
  },
  'capitalize':{
    'mutation':'Mutation',
    'fusion':'Fusion',
    'cnv':'CNV',
  }
}
REFS = {}
CNV_CUTOFF_STR = '# mean-z-cutoffs: [12.0, 5.0, -6.0, -12.0]'

def check_references(docsdir, datadir, ctrl_version):
    """Populate global REFS variable with reference files found
    that match ctrl_version specified.

    The REFS dict is keyed by CONTROL_LIST values (TruQ3 or HD753)
    Values are dicts with keys same as REFFILE_LIST (TRUTHFILE,FUSIONFILE,..)
    """
    found = []
    for clabel, ctrl in CONTROL_LIST.items():
        # skip controls that don't match ctrl_version
        if not ((ctrl_version and ctrl_version in clabel) or
           (not ctrl_version and '_stampV' not in clabel)):
            continue
        truthfile = os.path.join(docsdir, 
            REFFILE_LIST['TRUTHFILE'].replace('CONTROL',clabel))
        if os.path.isfile(truthfile): 
            REFS[ctrl] = {}
            found.append(clabel)
            for ftype in REFFILE_LIST:
                # Files needed by this script will be in docsdir
                # Files generated by this script will be in datadir
                ddir = docsdir if 'FILE' in ftype else datadir
                fpath = os.path.join(ddir,
                    REFFILE_LIST[ftype].replace('CONTROL',clabel))
                if 'FILE' not in ftype or os.path.isfile(fpath):
                    REFS[ctrl][ftype] = fpath
    if found:
        sys.stdout.write("Truth files found for:  "+', '.join(found)+'\n')
    else:
        sys.stdout.write("No truth files found.\n")
    controls = sorted(REFS)
    sys.stdout.flush()
    return controls

def check_existing_dbs(datadir, ctrl_version):
    """Look for existing DBs.  Do not need truth files if DB exists"""
    found = []
    for clabel, ctrl in CONTROL_LIST.items():
        # skip controls that don't match ctrl_version
        if not ((ctrl_version and ctrl_version in clabel) or
           (not ctrl_version and '_stampV' not in clabel)):
            continue
        dbfile = os.path.join(datadir, 
            REFFILE_LIST['SQLITEDB'].replace('CONTROL',clabel))
        if os.path.isfile(dbfile): 
            REFS[ctrl] = {'SQLITEDB':dbfile,}
            found.append(clabel)
            for ftype in ('SPREADSHEET',):
                fpath = os.path.join(datadir,
                    REFFILE_LIST[ftype].replace('CONTROL',clabel))
                REFS[ctrl][ftype] = fpath
    if found:
        sys.stdout.write("DB files found for:  "+', '.join(found)+'\n')
    else:
        sys.stdout.write("No DB files found.\n")
    controls = sorted(REFS)
    sys.stdout.flush()
    return controls

#----fileops.py---------------------------------------------------------------

def group_files_by_sample(inputfiles):
    """HD753 uses both a variant report and fusion report for each sample"""
    extensions = {
        '.cnvs': 'c_report',
        '.fusions.filtered.txt': 'f_report',
        '.variant_report.txt': 'v_report', }
    samples = defaultdict(dict)
    infiles = []
    for in_arg in inputfiles: # input can be files or folders
        if os.path.isfile(in_arg):
            infiles.append(in_arg)
        elif os.path.isdir(in_arg):
            infiles.extend([ os.path.join(in_arg, f) for f in \
                             os.listdir(in_arg) ])
    badfiles = []
    for infile in infiles:
        fname = os.path.basename(infile).lower()
        control = None
        if '.tiles.cnv' in fname or '.offtarget.' in fname:
            # ignore off target and tile cnv files
            badfiles.append(infile)
            continue
        if re.search('t[ru]*q.?3', fname):
            control = 'TruQ3'
        elif re.search('hd.*753', fname):
            control = 'HD753'
        else:
            badfiles.append(infile)
            continue
        for ext in extensions:
            if infile.endswith(ext):
                sample = os.path.basename(infile).replace(ext,'')
                runnum = sample.lstrip('TRUQtruqHDhd753').lstrip('_').lstrip('STAMP')
                runnum = runnum.split('_')[0]
                # sort validation runs first from regular runs
                if runnum.startswith("V"):
                  runnum = " "+runnum
                run = "STAMP{}".format(runnum) if runnum else ''
                samples[sample][extensions[ext]] = infile
                samples[sample]['run'] = run
                samples[sample]['control'] = control
    return samples, badfiles

def massage_data(data, vartype):
    """Unify differing formats and convert data types to appropriate types"""
    if vartype=='mutation':
        for d in data:
            d['position'] = int(d['position'])
            if not 'HGVS' in d and 'CDS_Change' in d:
                if len(d['CDS_Change']) > 1:
                    d['HGVS'] = 'c.' + d['CDS_Change']
            elif not 'CDS_Change' in d and 'HGVS' in d:
                d['CDS_Change'] = d['HGVS'].lstrip('c').lstrip('.')
            if not 'protein' in d and 'AA_Change' in d:
                d['protein'] = d['AA_Change']
            elif not 'AA_Change' in d and 'protein' in d:
                d['AA_Change'] = d['protein']
            if 'expectedVAF' in d:
                if d['expectedVAF']:
                    d['HorizonVAF'] = float(d['expectedVAF'].rstrip('%'))
                else:
                    d['HorizonVAF'] = None
    elif vartype=='cnv':
        for d in data:
            if 'mean-z' in d:
                d['mean_z'] = d['mean-z']

def count_uppercase(s):
    return sum(1 for c in s if c.isupper())

def field2dbfield(f):
    """Convert field from variant report style to match db column name"""
    newf = f.replace(' ','_')
    if count_uppercase(newf)<3:
        newf = newf.lower() 
    return newf

def field2reportfield(f):
    """Convert field to variant report style"""
    newf = f.replace('_',' ')
    if count_uppercase(newf)==0:
        newf = newf.title() 
    return newf

def parse_tab_file(tabfile, keyfunc=None, fieldfunc=None, requiredfield=None):
    """Parse a tab-delimited file with column headers.  Returns a dict with
       key values:
       'fields': a list of fields in the order they appear in the column header
       'data': a list of dicts containing the values of each row in the order
               they appear in the file.  The dicts are keyed by field name with 
               values the row values; also, an additional key 'line' is added
               with value the original line from the file.  If the optional arg
               keyfunc is supplied, then and additional key 'dkey' is added
               with value the result from the keyfunc function on that row.
       'datadict': (optional) a dict keyed by the result of keyfunc operated on 
               the row dict with value the row dict.  This value only appears
               if keyfunc is present.

       Keyword arguments:
       keyfunc -- function to create a unique key for each row of data.  The
               supplied function should take a dict as its only argument and
               return a unique key for each data row.
       fieldfunc -- function to reformat field names from header.
       requiredfield -- skip rows where this field is empty.  """
    data = []
    datadict = {}
    header = []
    with open(tabfile, 'r') as fh:
        for line in fh:
            if line.startswith('#'):
                header.append(line.rstrip())
                continue
            else:
                fields = [ fieldfunc(f.strip()) if fieldfunc else f.strip() \
                   for f in line.rstrip('\t\n\r').split("\t") ]
                break
        for line in fh:
            if not line.rstrip('\n\r'): 
                continue
            vals = [ v.strip() for v in line.split("\t") ]
            d = dict(zip(fields, vals))
            if requiredfield and d.get(requiredfield, '')=='':
                continue
            d['line'] = line
            data.append(d)
            if keyfunc:
                dkey = keyfunc(d)
                d['dkey'] = dkey
                datadict[dkey] = d
    tabfileinfo = {'fields':fields, 'data':data, 'header':header}
    if keyfunc:
        tabfileinfo['datadict'] = datadict
    return tabfileinfo

def parse_truths(truthfile, create_dkey):
    sys.stdout.write("  Reading truths: {}\n".format(truthfile))
    truthinfo = parse_tab_file(truthfile, keyfunc=create_dkey)
    return truthinfo


#-----------------------------------------------------------------------------

def print_checked_file(vinfo, truthset, outfile):
    for vartype in outfile:
        tdat = truthset.datadict[vartype]
        summary = vinfo.summary[vartype]
        fields = vinfo.fields[vartype][:] + ['Expected?',]
        sys.stdout.write("Writing {}\n".format(outfile[vartype]))
        content = "# Num expected found: {}\n".format(summary['Expected']) +\
                  "# Num not expected: {}\n".format(summary['Other']) +\
                  "# Num not found: {}\n".format(summary['Not found'])
        sys.stdout.write(content)
        content += "\t".join([field2reportfield(f) for f in fields])+"\n"
        with open(outfile[vartype], 'w') as ofh:
            for d in vinfo.data[vartype]:
                if d['Expected?']=='Expected':
                    dkey = d['dkey']
                    if tdat[dkey].get('HorizonVAF'):
                        d['Expected?'] +=' ({}%)'.format(
                                         tdat[dkey]['HorizonVAF'])
                    elif tdat[dkey].get('HorizonCopies'):
                        d['Expected?'] +=' ({} copies)'.format(
                                         tdat[dkey]['HorizonCopies'])
                row = [ d[f] for f in fields ]
                content += "\t".join([ str(r) for r in row ])+"\n"
            ofh.write(content)
            for dkey in sorted(summary['notseen']):
                d = tdat[dkey].copy()
                d['CDS Change'] = d['HGVS'].replace('c.','')
                d['AA Change'] = d['protein']
                d['Expected?'] = 'Not found'
                if tdat[dkey]['HorizonVAF']:
                    d['Expected?'] += ' ({})'.format(tdat[dkey]['HorizonVAF'])
                row = [ d[f] if f in d else '' for f in fields ]
                ofh.write("\t".join([ str(r) for r in row ]) + "\n")

#----dbops.py-----------------------------------------------------------------

def current_time():
    return datetime.datetime.now()

def results_as_dict(cursor):
    columns = [ d[0] for d in cursor.description ]
    data = []
    for ans in cursor.fetchall():
        d = dict(zip(columns, ans))
        data.append(d)
    return data

def connect_db(dbfile):
    sys.stdout.write("  Connecting to db {}\n".format(dbfile))
    dbh = sqlite3.connect(dbfile)
    return dbh

def add_schema(dbh, schemafile):
    sys.stdout.write("  Reading schema {}\n".format(schemafile))
    with open(schemafile, 'r') as fh:
        schema = ' '.join(fh.readlines())
        dbh.executescript(schema)

def save_variants(cursor, dbtable, data, fields, is_expected=0):
    flist = ['id',]+ fields[:]
    if not 'is_expected' in flist: 
        flist.append('is_expected')
    columns = '({})'.format(','.join(flist+['last_modified',]))
    ins_sql = 'INSERT INTO {} {} VALUES (?{})'.format(dbtable, columns,
              ',?'*len(flist))
    for row in data:
        if not ('is_expected' in row and row['is_expected']):
            row['is_expected'] = is_expected
        mut = [ row[f] if f in row else None for f in flist ]
        mut.append(current_time())
        cursor.execute(ins_sql, mut)
    sys.stdout.flush()

def save_sample(cursor, run_name, sample_name, status):
    cursor.execute("INSERT INTO sample (sample_name, run_name, "+\
                   "sample_status, last_modified) VALUES (?,?,?,?)", 
                   (sample_name, run_name, status, current_time()))

def update_sample(cursor, run_name, sample_name, status):
    sys.stdout.write("  Updating run/sample {}, {}, status={}\n".format(
                     run_name, sample_name, status))
    cursor.execute("UPDATE sample SET sample_status=?, last_modified=?"+\
                   " WHERE run_name=? AND sample_name=?",
                   (status, current_time(), run_name, sample_name))

def get_sample(cursor, run, sample):
    samples = get_samples(cursor, run, sample)
    return samples[0] if samples else None
    
def get_samples(cursor, run=None, sample=None, vartype=None):
    cmd = "SELECT s.* FROM sample s"
    where = []
    args = []
    groupby = []
    if vartype and vartype in VARTYPES:
        cmd += ', sample_{} v'.format(vartype)
        where.append("s.id=v.sample_id")
        groupby.append("s.id")
    if run:
        where.append("s.run_name=?")
        args.append(run)
    if sample:
        where.append("s.sample_name=?")
        args.append(sample)
    if where:
        cmd += " WHERE " + " AND ".join(where)
    if groupby:
        cmd += " GROUP BY " + ", ".join(groupby)
    cursor.execute(cmd, args)
    results = results_as_dict(cursor)
    return results
    
def get_num_variants_missing(cursor, sample_id, vartype):
    cmd = """SELECT count(*) FROM {0} v WHERE v.is_expected=1
          AND v.id NOT IN (SELECT sm.{0}_id FROM sample_{0} sm 
          WHERE sm.sample_id=?)""".format(vartype)
    cursor.execute(cmd, [sample_id,])
    ans = cursor.fetchone()
    return ans[0] if ans else None

def get_num_variants_other(cursor, sample_id, vartype):
    cmd = "SELECT count(*) FROM {0} v, sample_{0} sv ".format(vartype)+\
          " WHERE v.id=sv.{}_id AND v.is_expected=0".format(vartype)+\
          " AND sv.sample_id=?"
    cursor.execute(cmd, [sample_id,])
    ans = cursor.fetchone()
    return ans[0] if ans else None

def update_sample_counts(cursor, sample_id):
    vals = [sample_id, sample_id, sample_id]
    for vartype in ('mutation', 'fusion', 'cnv'):
        vals.append(get_num_variants_missing(cursor, sample_id, vartype))
        vals.append(get_num_variants_other(cursor, sample_id, vartype))
    cmd = "UPDATE sample SET num_mutations="+\
          "(SELECT COUNT(*) FROM sample_mutation WHERE sample_id=?),"+\
          " num_fusions="+\
          "(SELECT COUNT(*) FROM sample_fusion WHERE sample_id=?),"+\
          " num_cnvs="+\
          "(SELECT COUNT(*) FROM sample_cnv WHERE sample_id=?),"+\
          " num_mutations_missing=?, num_mutations_other=?, "+\
          " num_fusions_missing=?, num_fusions_other=?,"+\
          " num_cnvs_missing=?, num_cnvs_other=?"+\
          " WHERE sample.id=?"
    vals.append(sample_id)
    cursor.execute(cmd, vals)

def get_mutation(cursor, gene, pos, ref, var, debug=False):
    muts = get_mutations(cursor, gene, pos, ref, var, debug)
    return muts[0] if muts else None
    
def get_mutations(cursor, gene=None, pos=None, ref=None, var=None,
                  debug=False):
    cmd = "SELECT * FROM mutation"
    where = []
    args = []
    if gene:
        where.append("gene=?")
        args.append(gene)
    if pos:
        where.append("position=?")
        args.append(pos)
    if ref:
        where.append("ref=?")
        args.append(ref)
    if var:
        where.append("var=?")
        args.append(var)
    if where:
        cmd += " WHERE " + " AND ".join(where)
    if debug: print "cmd {} ({})".format(cmd, args)
    cursor.execute(cmd, args)
    results = results_as_dict(cursor)
    return results

def get_fusion(cursor, region1, region2, break1, break2, debug=False):
    fusions = get_fusions(cursor, region1, region2, break1, break2, debug)
    return fusions[0] if fusions else None
    
def get_fusions(cursor, region1=None, region2=None, break1=None, break2=None,
                  debug=False):
    cmd = "SELECT * FROM fusion"
    where = []
    args = []
    if region1:
        where.append("region1=?")
        args.append(region1)
    if region2:
        where.append("region2=?")
        args.append(region2)
    if break1:
        where.append("break1=?")
        args.append(break1)
    if break2:
        where.append("break2=?")
        args.append(break2)
    if where:
        cmd += " WHERE " + " AND ".join(where)
    if debug: print "cmd {} ({})".format(cmd, args)
    cursor.execute(cmd, args)
    results = results_as_dict(cursor)
    return results

def get_cnv(cursor, gene, debug=False):
    cnvs = get_cnvs(cursor, gene, debug)
    return cnvs[0] if cnvs else None
    
def get_cnvs(cursor, gene=None, debug=False):
    cmd = "SELECT * FROM cnv"
    where = []
    args = []
    if gene:
        where.append("gene=?")
        args.append(gene)
    if where:
        cmd += " WHERE " + " AND ".join(where)
    if debug: print "cmd {} ({})".format(cmd, args)
    cursor.execute(cmd, args)
    results = results_as_dict(cursor)
    return results

def save_sample_mutation(cursor, sample_id, d, fields, debug=False):
    mut = get_mutation(cursor, d['gene'], d['position'], d['ref'], d['var'])
    if debug: print "\nd{}\nmut {}".format(d, mut)
    if not mut: # mutation not in db, so save
        save_variants(cursor, 'mutation', [d,], fields)
        mut = get_mutation(cursor, d['gene'], d['position'], d['ref'], 
                           d['var'], debug=debug)
    ins_sql = 'INSERT INTO sample_mutation (sample_id, mutation_id, vaf, '+\
              'vaf_status, last_modified) VALUES (?,?,?,?,?)'
    vals = [ d[f] if f in d else None for f in ('VAF%', 'status') ]
    vals.append(current_time())
    cursor.execute(ins_sql, ([sample_id, mut['id'],]+vals))

def delete_sample_mutations(cursor, sample_id):
    cursor.execute("DELETE FROM sample_mutation WHERE sample_id=?", 
                   (sample_id,))

def get_sample_mutations(cursor, sample_id, sample_status=None):
    cmd = "SELECT * FROM sample_mutation v, mutation m, sample s ON "+\
          "v.mutation_id=m.id AND v.sample_id=s.id WHERE v.sample_id=?" 
    args = [sample_id,]
    if sample_status:
        cmd += " AND s.sample_status=?"
        args.append(sample_status)
    cursor.execute(cmd, args)
    results = results_as_dict(cursor)
    return results

def get_all_sample_mutations(cursor):
    cmd = "SELECT * FROM sample_mutation v, mutation m, sample s ON "+\
          "v.mutation_id=m.id AND v.sample_id=s.id" 
    cursor.execute(cmd)
    results = results_as_dict(cursor)
    return results

def save_sample_fusion(cursor, sample_id, d, fields, debug=False):
    fusion = get_fusion(cursor, d['region1'], d['region2'], d['break1'], 
                     d['break2'], debug=debug)
    if debug: print "\nd{}\nfusion {}".format(d, fusion)
    if not fusion: # fusion not in db, so save
        save_variants(cursor, 'fusion', [d,], fields)
        fusion = get_fusion(cursor, d['region1'], d['region2'], d['break1'], 
                     d['break2'], debug=debug)
    ins_sql = 'INSERT INTO sample_fusion '+\
              '(sample_id, fusion_id, last_modified) VALUES (?,?,?)'
#    sys.stderr.write(ins_sql+"\n")
#    sys.stderr.write("{} {}\n".format(sample_id, fusion['id']))
#    sys.stderr.flush()
    cursor.execute(ins_sql, [sample_id, fusion['id'], current_time()])

def delete_sample_fusions(cursor, sample_id):
    cursor.execute("DELETE FROM sample_fusion WHERE sample_id=?", 
                   (sample_id,))

def get_sample_fusions(cursor, sample_id, sample_status=None):
    cmd = "SELECT * FROM sample_fusion v, fusion f, sample s ON "+\
          "v.fusion_id=f.id AND v.sample_id=s.id WHERE v.sample_id=?" 
    args = [sample_id,]
    if sample_status:
        cmd += " AND s.sample_status=?"
        args.append(sample_status)
    cursor.execute(cmd, args)
    results = results_as_dict(cursor)
    return results

def get_all_sample_fusions(cursor):
    cmd = "SELECT * FROM sample_fusion v, fusion f, sample s ON "+\
          "v.fusion_id=f.id AND v.sample_id=s.id" 
    cursor.execute(cmd)
    results = results_as_dict(cursor)
    return results

def save_sample_cnv(cursor, sample_id, d, fields, debug=False):
    cnv = get_cnv(cursor, d['gene'], )
    if debug: print "\nd{}\ncnv {}".format(d, cnv)
    if not cnv: # cnv not in db, so save
        save_variants(cursor, 'cnv', [d,], fields)
        cnv = get_cnv(cursor, d['gene'], debug=debug)
    ins_sql = 'INSERT INTO sample_cnv (sample_id, cnv_id, mean_z, '+\
              'mcopies, status, last_modified) VALUES (?,?,?,?,?,?)'
    vals = [ d[f] if f in d else None for f in ('mean_z', 'mcopies', 'status') ]
    vals.append(current_time())
    cursor.execute(ins_sql, ([sample_id, cnv['id'],]+vals))

def delete_sample_cnvs(cursor, sample_id):
    cursor.execute("DELETE FROM sample_cnv WHERE sample_id=?", 
                   (sample_id,))

def get_sample_cnvs(cursor, sample_id, sample_status=None):
    cmd = "SELECT * FROM sample_cnv v, cnv c, sample s ON "+\
          "v.cnv_id=c.id AND v.sample_id=s.id WHERE v.sample_id=?" 
    args = [sample_id,]
    if sample_status:
        cmd += " AND s.sample_status=?"
        args.append(sample_status)
    cursor.execute(cmd, args)
    results = results_as_dict(cursor)
    return results

def get_all_sample_cnvs(cursor):
    cmd = "SELECT * FROM sample_cnv v, cnv c, sample s ON "+\
          "v.cnv_id=c.id AND v.sample_id=s.id" 
    cursor.execute(cmd)
    results = results_as_dict(cursor)
    return results

#-----------------------------------------------------------------------------

def mut_key(d):
    """Unique key for mutations"""
    vals = [ d['gene'], d['position'], d['ref'], d['var'] ]
    return '::'.join([str(v) for v in vals])

def fusion_key(d):
    """Unique key for fusions"""
    vals = [ d['region1'], d['region2'], d['break1'], d['break2'] ]
    return '::'.join([str(v) for v in vals])

def cnv_key(d):
    """Unique key for cnvs"""
    vals = [ d['gene'], d['locus'] ]
    return '::'.join([str(v) for v in vals])


class TruthSet:
    def __init__(self, name, dbh, ctrl_version):
        self.name = name
        self.dbh = dbh
        self.ctrl_version = ctrl_version
        self.ctrl_version_tag = ' (STAMP {})'.format(ctrl_version) if \
                                ctrl_version else ''
        self.cursor = dbh.cursor()
        self.variant_types = []
        self.dkey = {
            'mutation': mut_key,
            'fusion': fusion_key,
            'cnv': cnv_key,
        }
        self.data = {}
        self.datadict = {}
        self.fields = {}
        for vartype in VARTYPES:
            (data, ddict, fields) = self.truths_from_db(self.cursor, vartype)
            self.data[vartype] = data
            self.datadict[vartype] = ddict
            self.fields[vartype] = fields
            if data:
                self.variant_types.append(vartype)

    def has_vartype(self, vartype):
        return True if vartype in self.variant_types else False

    def truths_from_db(self, cursor, dbtable):
        cmd = "SELECT * FROM {} WHERE is_expected=?".format(dbtable)
        cursor.execute(cmd, [1,])
        columns = [ d[0] for d in cursor.description ]
        data = []
        datadict = {}
        create_dkey = self.dkey[dbtable]
        for ans in cursor.fetchall():
            d = dict(zip(columns, ans))
            dkey = create_dkey(d)
            d['dkey'] = dkey
            data.append(d)
            datadict[dkey] = d
        columns.remove('id')
        columns.remove('is_expected')
        columns.remove('last_modified')
        return data, datadict, columns

    def db_summary(self):
        msgs = [self.name+self.ctrl_version_tag+'\n',]
        cursor = self.cursor
        cursor.execute('SELECT COUNT(*)' +\
            ', (SELECT COUNT(*) FROM sample WHERE sample_status=?)'*2 +\
            ' FROM sample', ['PASS', 'FAIL'])
        ans = cursor.fetchone()
        msgs.append("    {} runs\n".format(ans[1],))
        cursor.execute('SELECT COUNT(*) FROM mutation WHERE is_expected=1')
        ans = cursor.fetchone()
        msgs.append("    {} expected mutations\n".format(ans[0]))
        cursor.execute('SELECT COUNT(*) FROM mutation WHERE is_expected=0')
        ans = cursor.fetchone()
        msgs.append("    {} other mutations\n".format(ans[0]))
#        cursor.execute('SELECT COUNT(*) FROM sample_mutation')
#        ans = cursor.fetchone()
#        msgs.append("  {} total mutations\n".format(ans[0]))
        if self.has_vartype('fusion'):
            cursor.execute('SELECT COUNT(*) FROM fusion WHERE is_expected=1')
            ans = cursor.fetchone()
            msgs.append("    {} expected fusion{}\n".format(ans[0],
                        '' if ans[0]==1 else 's'))
            cursor.execute('SELECT COUNT(*) FROM fusion WHERE is_expected=0')
            ans = cursor.fetchone()
            msgs.append("    {} other fusions\n".format(ans[0]))
#            cursor.execute('SELECT COUNT(*) FROM sample_fusion')
#            ans = cursor.fetchone()
#            msgs.append("  {} total fusions\n".format(ans[0]))
        if self.has_vartype('cnv'):
            cursor.execute('SELECT COUNT(*) FROM cnv WHERE is_expected=1')
            ans = cursor.fetchone()
            msgs.append("    {} expected CNV{}\n".format(ans[0],
                        '' if ans[0]==1 else 's'))
            cursor.execute('SELECT COUNT(*) FROM cnv WHERE is_expected=0')
            ans = cursor.fetchone()
            msgs.append("    {} other CNVs\n".format(ans[0]))
        return msgs
    
class VariantSet:
    def __init__(self, sample, run, ctrl, truthset):
        self.sample = sample
        self.run = run
        self.ctrl = ctrl
        self.truthset = truthset
        self.dbh = truthset.dbh
        self.cursor = truthset.cursor
        self.data = {}
        self.datadict = {}
        self.fields = {}
        self.vartypes = []

    def has_vartype(self, vartype):
        return True if vartype in self.data and self.data[vartype] else False

    def add_variants(self, vfile, vartype):
        sys.stdout.write("  Reading {} report: {}\n".format(vartype, vfile))
        create_dkey = self.truthset.dkey[vartype]
        requiredfield = 'status' if vartype=='cnv' else None
        vinfo = parse_tab_file(vfile, keyfunc=create_dkey, 
                fieldfunc=field2dbfield, requiredfield=requiredfield)
        massage_data(vinfo['data'], vartype)
        if vartype=='cnv':
            # CNV cutoffs are hardcoded.  Check that they are still valid.
            if not CNV_CUTOFF_STR in vinfo['header']:
                sys.stderr.write("WARNING: Need to check CNV cutoffs in {}\n".format(vfile))
                sys.stderr.write("  Expect {}\nHave {}\n".format(CNV_CUTOFF_STR, vinfo['header']))
                sys.stderr.flush()
        self.data[vartype] = vinfo['data']
        self.datadict[vartype] = vinfo['datadict']
        self.fields[vartype] = vinfo['fields']
        numvar = len(vinfo['data'])
        sys.stdout.write("    {} {}s\n".format(numvar, vartype))
        self.vartypes.append(vartype)
        return vinfo

    def compare_variants(self, defaultstatus='PASS'):
        """Counts number of expected, other, and total variants present in 
        variantset.  Also returns dkeys to missing expected variants."""
        self.summary = {'Status': defaultstatus }
        tot_notfound = 0
        for vartype in self.vartypes:
            truth = self.truthset.datadict[vartype]
            create_dkey = self.truthset.dkey[vartype]
            truths_seen = dict([ (dkey, False) for dkey in truth ])
            self.summary[vartype] = { 'Total':0, #'Status': defaultstatus,
                                      'Expected':0, 'Other':0, }
            summary = self.summary[vartype]
            for d in self.data[vartype]:
                d['Expected?'] = 'Not expected'
                dkey = create_dkey(d)
                summary['Total'] += 1
                if dkey in truth:
                    summary['Expected'] += 1
                    d['Expected?'] = 'Expected'
                    truths_seen[dkey] = True
                else:
                    summary['Other'] += 1
            notseen = [ dkey for dkey in truths_seen.keys() 
                        if not truths_seen[dkey] ]
            summary['Not found'] = len(notseen)
            summary['notseen'] = notseen
            tot_notfound += summary['Not found']
            if notseen:
                sys.stdout.write("    {}s not found: {}\n".format(
                    FORMAT_VARTYPE['capitalize'][vartype], ", ".join(notseen)))
#                if len(notseen) > summary['Expected']: 
#                    self.summary['Status'] = 'FAIL'
#                    sys.stderr.write("Status: FAIL {} > {}\n".format(
#                        len(notseen), summary['Expected']))
            else:
                sys.stdout.write("    All expected {}s found\n".format(vartype))
        if tot_notfound==0:
            sys.stdout.write("  All expected variants found\n")
        return self.summary

    def save2db(self, status, force=False):
        sampname = self.sample
        runname = self.run
        if not runname or not sampname:
            if sampname:
                sys.stderr.write("  Need run name for sample {}\n".format(
                                 sampname))
            elif runname:
                sys.stderr.write("  Need sample for run {}\n".format(runname))
            else:
                sys.stderr.write("  Need sample and run name\n")
            sys.stderr.flush()
            return 0
        cursor = self.cursor
        sample = get_sample(cursor, runname, sampname)
        if force or not sample:
            if sample and force:
                sys.stdout.write('  Deleting old data for {}:{} in db.\n'.format(
                                 runname, sampname))
                update_sample(cursor, runname, sampname, status)
                delete_sample_mutations(cursor, sample['id'])
                delete_sample_fusions(cursor, sample['id'])
                delete_sample_cnvs(cursor, sample['id'])
            elif not sample:
                sys.stdout.write('  Saving sample {}:{} in db.\n'.format(
                                 runname, sampname))
                save_sample(cursor, runname, sampname, status)
                sample = get_sample(cursor, runname, sampname)
            for vartype, vdata in self.data.items():
                fields = self.truthset.fields[vartype]
                if vartype=='fusion':
                    for d in vdata:
                        save_sample_fusion(cursor, sample['id'], d, fields)
                elif vartype=='cnv':
                    for d in vdata:
                        save_sample_cnv(cursor, sample['id'], d, fields)
                else:
                    for d in vdata:
                        save_sample_mutation(cursor, sample['id'], d, fields)
            update_sample_counts(cursor, sample['id'])
            self.dbh.commit()
        vafs = get_sample_mutations(cursor, sample['id'])
        sys.stdout.write('    Have {} mutations for sample {}:{} in db.\n'.\
                         format(len(vafs), runname, sampname))
        sys.stdout.flush()
        return 1


def check_db(ctrl):
    sys.stdout.write("\n{}: checking db\n".format(ctrl))
    dbfile = REFS[ctrl]['SQLITEDB']
    is_new_db = not os.path.exists(dbfile)
    dbh = connect_db(dbfile)
    cursor = dbh.cursor()
    msgs = []
    if is_new_db:
        add_schema(dbh, REFS[ctrl]['SCHEMAFILE'])
        msgs.append("  Saving truths\n")
        tinfo = parse_truths(REFS[ctrl]['TRUTHFILE'], mut_key)
        sys.stdout.write("    {} mutations\n".format(len(tinfo['data'])))
        save_variants(cursor, 'mutation', tinfo['data'], tinfo['fields'])
        dbh.commit()
        cursor.execute('SELECT COUNT(*) FROM mutation')
        msgs.append("    {} rows inserted into {}\n".format(
                    cursor.fetchone()[0], 'mutation'))
        if 'FUSIONFILE' in REFS[ctrl]:
            finfo = parse_truths(REFS[ctrl]['FUSIONFILE'], fusion_key)
            sys.stdout.write("    {} fusions\n".format(len(finfo['data'])))
            save_variants(cursor, 'fusion', finfo['data'], finfo['fields'])
            dbh.commit()
            cursor.execute('SELECT COUNT(*) FROM fusion')
            msgs.append("    {} rows inserted into {}\n".format(
                    cursor.fetchone()[0], 'fusion'))
            tinfo['fusion_data'] = finfo['data']
            tinfo['fusion_fields'] = finfo['fields']
            tinfo['fusion_datadict'] = finfo['datadict']
        if 'CNVFILE' in REFS[ctrl]:
            cinfo = parse_truths(REFS[ctrl]['CNVFILE'], cnv_key)
            sys.stdout.write("    {} CNVs\n".format(len(cinfo['data'])))
            save_variants(cursor, 'cnv', cinfo['data'], cinfo['fields'])
            dbh.commit()
            cursor.execute('SELECT COUNT(*) FROM cnv')
            msgs.append("    {} rows inserted into {}\n".format(
                    cursor.fetchone()[0], 'cnv'))
            tinfo['cnv_data'] = cinfo['data']
            tinfo['cnv_fields'] = cinfo['fields']
            tinfo['cnv_datadict'] = cinfo['datadict']
#    else:
#        tinfo = truths_from_db(cursor)
#        msgs = db_summary(cursor)
        sys.stdout.write(''.join(msgs))
        sys.stdout.flush()
    return dbh


#----spreadsheet.py-----------------------------------------------------------

def mutation_sheet_data(ctrl, dbh, samples, tfields):
    allmuts = get_all_sample_mutations(dbh.cursor())
    data = { 'title': ctrl+' mutations', 
             'hiderows': [0, ],
             'horizon':defaultdict(dict), 
             'expected':defaultdict(dict), 
             'not_expected':defaultdict(dict) }
    for d in allmuts:
        if not d['sample_status']=='FAIL': # skip failed samples
            if d['HorizonVAF'] and d['is_expected']:
                vdict = data['horizon']
                dkey = int(d['mutation_id']) # sort by order in db
            elif d['is_expected']:
                vdict = data['expected']
                dkey = int(d['mutation_id']) # sort by order in db
            else:
                vdict = data['not_expected']
                dkey = mut_key(d) # sort by gene, position
            vdict[dkey][d['sample_name']] = d
    numexpected = len(data['expected']) + len(data['horizon'])
    data['header'] = [ "# This spreadsheet is automatically generated." +\
           " Any edits will be lost in future versions.",
           "# Num samples in spreadsheet: {}".format(len(samples['good'])), 
           "# Num expected variants: {}".format(numexpected), ]
    data['fields'] = tfields[:]
#    data['fields'].remove('ref')
#    data['fields'].remove('var')
    if 'is_expected' in data['fields']: 
        data['fields'].remove('is_expected')
    return data

def fusion_sheet_data(ctrl, dbh, samples, tfields):
    allfusions = get_all_sample_fusions(dbh.cursor())
    if not allfusions:
        return None
    data = { 'title': ctrl+' fusions',
             'hiderows': [0, ],
             'expected':defaultdict(dict), 
             'horizon':defaultdict(dict), 
             'not_expected':defaultdict(dict) }
    for d in allfusions:
        if not d['sample_status']=='FAIL':
            if d['HorizonVAF'] and d['is_expected']:
                vdict = data['horizon']
                dkey = int(d['fusion_id']) # sort by order in db
            elif d['is_expected']:
                vdict = data['expected']
                dkey = int(d['fusion_id']) # sort by order in db
            else:
                vdict = data['not_expected']
                dkey = int(d['fusion_id']) # sort by order in db
            vdict[dkey][d['sample_name']] = d
    numexpected = len(data['expected']) + len(data['horizon'])
    data['header'] = [ "# This spreadsheet is automatically generated." +\
           " Any edits will be lost in future versions.",
           "# Num samples in spreadsheet: {}".format(len(samples['good'])), 
           "# Num expected variants: {}".format(numexpected), ]
    data['fields'] = tfields[:]
    if 'is_expected' in data['fields']: 
        data['fields'].remove('is_expected')
    return data

def cnv_sheet_data(ctrl, dbh, samples, tfields):
    allcnvs = get_all_sample_cnvs(dbh.cursor())
    if not allcnvs:
        return None
    data = { 'title': ctrl+' CNVs',
             'hiderows': [0, ],
             'expected':defaultdict(dict), 
             'horizon':defaultdict(dict), 
             'not_expected':defaultdict(dict) }
    for d in allcnvs:
        if not d['sample_status']=='FAIL':
            if d['HorizonCopies'] and d['is_expected']:
                vdict = data['horizon']
                dkey = int(d['cnv_id']) # sort by order in db
            elif d['is_expected']:
                vdict = data['expected']
                dkey = int(d['cnv_id']) # sort by order in db
            else:
                vdict = data['not_expected']
                dkey = int(d['cnv_id']) # sort by order in db
            vdict[dkey][d['sample_name']] = d
    numexpected = len(data['expected']) + len(data['horizon'])
    data['header'] = [ "# This spreadsheet is automatically generated." +\
           " Any edits will be lost in future versions.", 
           "# Num samples in spreadsheet: {}".format(len(samples['good'])), 
           "# Num expected variants: {}".format(numexpected), 
           CNV_CUTOFF_STR]
    data['fields'] = tfields[:]
    # exclude these fields in cnv table from output
    for exclude in ('is_expected', 'HorizonCopies'):
      if exclude in data['fields']: 
        data['fields'].remove(exclude)
    return data

def convert_to_excel_col(colnum):
    mod = colnum % 26
    let = chr(mod+65)
    if colnum >= 26:
        rep = colnum/26
        let1 = chr(rep+64)
        let = let1 + let
    return let

def add_formats_to_workbook(workbook):
    wbformat = {}
    wbformat['bold'] = workbook.add_format({'bold': True})
    wbformat['perc'] = workbook.add_format({'num_format': '#.##%'})
    wbformat['red'] = workbook.add_format({'bg_color': '#C58886', 
                                       'border': 1, 'border_color':'#CDCDCD'})
    wbformat['ltred'] = workbook.add_format({'bg_color': '#E9D4D3', 
                                       'border': 1, 'border_color':'#CDCDCD'})
    wbformat['orange'] = workbook.add_format({'bg_color': '#FCD5B4',
                                       'border': 1, 'border_color':'#CDCDCD'})
    wbformat['ltgreen'] = workbook.add_format({'bg_color': '#EBF1DE',
                                       'border': 1, 'border_color':'#CDCDCD'})
    wbformat['ltblue'] = workbook.add_format({'bg_color': '#D7E1EB',
                                       'border': 1, 'border_color':'#CDCDCD'})
    wbformat['blue'] = workbook.add_format({'bg_color': '#88A4C5',
                                       'border': 1, 'border_color':'#CDCDCD'})
    wbformat['gray'] = workbook.add_format({'bg_color': '#F0F0F0',
                                       'border': 1, 'border_color':'#CDCDCD'})
    wbformat['dkgray'] = workbook.add_format({'bg_color': '#D9D9D9',
                                       'border': 1, 'border_color':'#CDCDCD'})
    wbformat['ltbluepatt'] = workbook.add_format({'fg_color': '#DCE6F0', 
                                       'pattern': 8,
                                       'border': 1, 'border_color':'#CDCDCD'})
    wbformat['ltgreen_perc'] = workbook.add_format({'num_format': '#.##%',
                                       'bg_color': '#EBF1DE',
                                       'border': 1, 'border_color':'#CDCDCD'})
    wbformat['gray_perc'] = workbook.add_format({'num_format': '#.##%',
                                       'bg_color': '#F0F0F0',
                                       'border': 1, 'border_color':'#CDCDCD'})
    wbformat['dkgray_perc'] = workbook.add_format({'num_format': '#.##%',
                                       'bg_color': '#D9D9D9',
                                       'border': 1, 'border_color':'#CDCDCD'})
    return wbformat

def add_avg_stddev_columns(worksheet, rownum, colavg, colstd, mutdat,
                           runrange, expecttype):
    if expecttype!='not_expected':
        worksheet.write_array_formula(rownum, colavg, rownum, colavg,
                    '{'+'=AVERAGE(IF(ISBLANK({0}),0,{0}))'.format(
                    runrange)+'}')
        if len(mutdat)>1:
            worksheet.write_array_formula(rownum, colstd, rownum, colstd,
                    '{'+'=STDEV(IF(ISBLANK({0}),0,{0}))'.format(runrange)+'}')
    else:
        worksheet.write(rownum, colavg, '=AVERAGE({})'.format(runrange))
        if len(mutdat)>1:
            worksheet.write(rownum, colstd, '=STDEV({})'.format(runrange))

 
def add_mutation_sheet_excel(workbook, wbformat, samples, data, 
                             fieldfunc=None):
    worksheet = workbook.add_worksheet(data['title'])
    rownum = 0
    # comment lines
    for line in data['header']:
        worksheet.write(rownum, 0, line)
        rownum += 1
    # print column names
    rownum += 1 # skip row for run names
    i_col_ref = None
    i_col_var = None
    for colnum, f in enumerate(data['fields']):
        colname = fieldfunc(f) if fieldfunc else f
        if f=='ref': i_col_ref = colnum
        elif f=='var': i_col_var = colnum
        worksheet.write(rownum, colnum, colname, wbformat['bold'])
    worksheet.set_column(i_col_ref, i_col_var, None, None, {'hidden':True})
    calc_fields = ['AverageVAF', 'StddevVAF', '%Detection']
    i_col_avg = colnum+1
    i_col_std = colnum+2
    for f in calc_fields:
        colnum += 1
        worksheet.write(rownum, colnum, f, wbformat['bold'])
    i_col_run_s = colnum + 1
    for r, s in zip(samples['runs'], samples['good']):
        colnum += 1
        worksheet.write(rownum-1, colnum, r, wbformat['bold'])
        worksheet.write(rownum, colnum, s, wbformat['bold'])
    i_freeze = rownum+1
    i_col_run_e = colnum
    runcolxl_s = convert_to_excel_col(i_col_run_s)
    runcolxl_e = convert_to_excel_col(i_col_run_e)
    avgcolxl = convert_to_excel_col(i_col_avg)
    stdcolxl = convert_to_excel_col(i_col_std)
    i_position = data['fields'].index('position')
    i_horizonVAF = data['fields'].index('HorizonVAF')
    # print data by row/mutation, expected first
    numvariants = 0
    for expecttype in ('horizon', 'expected', 'not_expected'):
      percformat=wbformat['perc'] if expecttype=='horizon' else\
                 wbformat['gray_perc']
      if expecttype=='not_expected':
          percformat=wbformat['dkgray_perc']
      for sortkey in sorted(data[expecttype]):
        numvariants += 1
        rownum += 1
        vdat = [ data[expecttype][sortkey][sample] if sample \
               in data[expecttype][sortkey] else None \
               for sample in samples['good'] ] 
        vdat2 = [ d for d in vdat if d ] # dicts with data only
        for colnum, f in enumerate(data['fields']):
            v = vdat2[0][f] if f in vdat2[0] else ''
            if colnum == i_position: # format as number
                worksheet.write_number(rownum, colnum, v)
            elif colnum == i_horizonVAF: # format as number/percent
                if v: 
                    worksheet.write(rownum, colnum, v/100, percformat)
            else:
                worksheet.write(rownum, colnum, v)
        skipcalc = len(calc_fields)
        for i, d in enumerate(vdat):
            if d: worksheet.write_number(rownum, colnum+i+skipcalc+1, 
                                         float(d['vaf']))
        runrange = "{1}{0}:{2}{0}".format(rownum+1, runcolxl_s, runcolxl_e)
        add_avg_stddev_columns(worksheet, rownum, i_col_avg, i_col_std,
                               vdat2, runrange, expecttype)
        colnum += skipcalc
        worksheet.write(rownum, colnum, '=COUNT({})/{}'.format(runrange, 
                        len(samples['good'])), percformat)
        if expecttype in ('horizon',): 
            worksheet.conditional_format(runrange, {'type':'blanks', 
                                         'format':wbformat['ltred'], })
        elif expecttype=='expected':
            worksheet.set_row(rownum, None, wbformat['gray'])
            worksheet.conditional_format(runrange, {'type':'blanks', 
                                         'format':wbformat['ltblue'], })
        else: 
            worksheet.set_row(rownum, None, wbformat['dkgray'], {'hidden':True})
    worksheet.set_column(i_col_run_s-1, i_col_run_e-1, 10) #set col width
    worksheet.set_column(i_position, i_position, 9)
    for i in data['hiderows']:
        worksheet.set_row(i, None, None, {'hidden': True})
    worksheet.freeze_panes(i_freeze, 0)
    numruns = len(samples['runs'])
    numsamples = len(samples['good'])
    return {'num_runs':numruns, 'num_samples':numsamples, 
            'num_variants':numvariants}

def add_fusion_sheet_excel(workbook, wbformat, samples, data, 
                           fieldfunc=None):
    worksheet = workbook.add_worksheet(data['title'])
    rownum = 0
    # comment lines
    for line in data['header']:
        worksheet.write(rownum, 0, line)
        rownum += 1
    # print column names
    rownum += 1
    for colnum, f in enumerate(data['fields']):
        colname = fieldfunc(f) if fieldfunc else f
        worksheet.write(rownum, colnum, colname, wbformat['bold'])
    calc_fields = ['%Detection',]
    for f in calc_fields:
        colnum += 1
        worksheet.write(rownum, colnum, f, wbformat['bold'])
    i_col_run_s = colnum + 1
    for r, s in zip(samples['runs'], samples['good']):
        colnum += 1
        worksheet.write(rownum-1, colnum, r, wbformat['bold'])
        worksheet.write(rownum, colnum, s, wbformat['bold'])
    i_freeze = rownum+1
    i_col_run_e = colnum
    runcolxl_s = convert_to_excel_col(i_col_run_s)
    runcolxl_e = convert_to_excel_col(i_col_run_e)
    i_horizonVAF = data['fields'].index('HorizonVAF')
    # print data
    numvariants = 0
    for expecttype in ('horizon', 'expected', 'not_expected'):
      percformat = wbformat['gray_perc'] if expecttype=='not_expected' else \
                   wbformat['perc']
      if expecttype=='not_expected':
          percformat=wbformat['dkgray_perc']
      for sortkey in sorted(data[expecttype].keys()):
        numvariants += 1
        rownum += 1
        vdat = [ data[expecttype][sortkey][sample] if sample \
                 in data[expecttype][sortkey] else None \
                 for sample in samples['good'] ] 
        vdat2 = [ d for d in vdat if d ] # dicts with data only
        for colnum, f in enumerate(data['fields']):
            v = vdat2[0][f] if f in vdat2[0] else ''
            if colnum == i_horizonVAF: # format as number/percent
                if v: 
                    worksheet.write(rownum, colnum, v/100, percformat)
            else:
                worksheet.write(rownum, colnum, v)
        skipcalc = len(calc_fields)
        for i, d in enumerate(vdat):
            if d: worksheet.write(rownum, colnum+i+skipcalc+1, 'detected')
        runrange = "{1}{0}:{2}{0}".format(rownum+1, runcolxl_s, runcolxl_e)
        colnum += 1
        worksheet.write(rownum, colnum, '=COUNTA({})/{}'.format(runrange, 
                        len(samples['good'])), percformat)
        if expecttype in ('horizon',): 
            worksheet.conditional_format(runrange, 
              {'type':'blanks', 'format':wbformat['ltred'], })
        elif expecttype=='expected':
            worksheet.set_row(rownum, None, wbformat['gray'])
            worksheet.conditional_format(runrange, 
              {'type':'blanks', 'format':wbformat['ltblue'], })
        else: 
            worksheet.set_row(rownum, None, wbformat['dkgray'], {'hidden':True})
    worksheet.set_column(i_col_run_s-1, i_col_run_e-1, 10) #set col width
    for i in data['hiderows']:
        worksheet.set_row(i, None, None, {'hidden': True})
    worksheet.freeze_panes(i_freeze, 0)
    numruns = len(samples['runs'])
    numsamples = len(samples['good'])
    return {'num_runs':numruns, 'num_samples':numsamples, 
            'num_variants':numvariants}

def add_cnv_sheet_excel(workbook, wbformat, samples, data, fieldfunc=None):
    worksheet = workbook.add_worksheet(data['title'])
    rownum = 0
    # comment lines
    for line in data['header']:
        worksheet.write(rownum, 0, line)
        rownum += 1
    # print column names
    rownum += 1 # skip row for run names
    for colnum, f in enumerate(data['fields']):
        colname = fieldfunc(f) if fieldfunc else f
        worksheet.write(rownum, colnum, colname, wbformat['bold'])
    calc_fields = ['AverageScore', 'StddevScore', '%Detection']
    i_col_avg = colnum+1
    i_col_std = colnum+2
    for f in calc_fields:
        colnum += 1
        worksheet.write(rownum, colnum, f, wbformat['bold'])
    i_col_run_s = colnum + 1
    for r, s in zip(samples['runs'], samples['good']):
        colnum += 1
        worksheet.write(rownum-1, colnum, r, wbformat['bold'])
        worksheet.write(rownum, colnum, s, wbformat['bold'])
    i_freeze = rownum+1
    i_col_run_e = colnum
    runcolxl_s = convert_to_excel_col(i_col_run_s)
    runcolxl_e = convert_to_excel_col(i_col_run_e)
    avgcolxl = convert_to_excel_col(i_col_avg)
    stdcolxl = convert_to_excel_col(i_col_std)
#    i_horizonCopies = data['fields'].index('HorizonCopies')
    # print data by row/mutation, expected first
    numvariants = 0
    for expecttype in ('horizon', 'expected', 'not_expected'):
      percformat=wbformat['perc'] if expecttype=='horizon' else\
                 wbformat['gray_perc']
      if expecttype=='not_expected':
          percformat=wbformat['dkgray_perc']
      for sortkey in sorted(data[expecttype]):
        numvariants += 1
        rownum += 1
        vdat = [ data[expecttype][sortkey][sample] if sample \
               in data[expecttype][sortkey] else None \
               for sample in samples['good'] ] 
        vdat2 = [ d for d in vdat if d ] # dicts with data only
        for colnum, f in enumerate(data['fields']):
            v = vdat2[0][f] if f in vdat2[0] else ''
            worksheet.write(rownum, colnum, v)
        skipcalc = len(calc_fields)
        for i, d in enumerate(vdat):
            if d: worksheet.write_number(rownum, colnum+i+skipcalc+1, 
                                         float(d['mean_z']))
        runrange = "{1}{0}:{2}{0}".format(rownum+1, runcolxl_s, runcolxl_e)
        add_avg_stddev_columns(worksheet, rownum, i_col_avg, i_col_std,
                               vdat2, runrange, expecttype)
        colnum += skipcalc
        worksheet.write(rownum, colnum, '=COUNT({})/{}'.format(runrange, 
                        len(samples['good'])), percformat)
        if expecttype in ('horizon',): 
            worksheet.conditional_format(runrange, {'type':'blanks', 
                                         'format':wbformat['ltred'], })
        elif expecttype=='expected':
            worksheet.set_row(rownum, None, wbformat['gray'])
            worksheet.conditional_format(runrange, {'type':'blanks', 
                                         'format':wbformat['ltblue'], })
        else: 
            worksheet.set_row(rownum, None, wbformat['dkgray'], {'hidden':True})
    worksheet.set_column(i_col_run_s-1, i_col_run_e-1, 10) #set col width
#    worksheet.set_column(i_position, i_position, 9)
    for i in data['hiderows']:
        worksheet.set_row(i, None, None, {'hidden': True})
    worksheet.freeze_panes(i_freeze, 0)
    numruns = len(samples['runs'])
    numsamples = len(samples['good'])
    return {'num_runs':numruns, 'num_samples':numsamples, 
            'num_variants':numvariants}

def generate_excel_spreadsheet(ctrl, dbh, tfields, outfile):
    compile_sheet_data = { 'mutation': mutation_sheet_data,
                           'fusion': fusion_sheet_data, 
                           'cnv': cnv_sheet_data, }
    add_sheet_excel = { 'mutation': add_mutation_sheet_excel, 
                        'fusion': add_fusion_sheet_excel, 
                        'cnv': add_cnv_sheet_excel, }
    sys.stdout.write("\nCreating {} Excel file:\n{}\n".format(ctrl, outfile))
    workbook = xlsxwriter.Workbook(outfile)
    wbformat = add_formats_to_workbook(workbook)
    nums = {}
    for vartype in VARTYPES:
        all_samples = get_samples(dbh.cursor(), vartype=vartype)
        samples = { 'failed': [], 'good': [], 'runs': [] }
        for d in sorted(all_samples, reverse=True, key=lambda d: \
              "%-10s %s" % (d['run_name'], d['sample_name'])):
            if d['sample_status']=='FAIL':
                samples['failed'].append(d['sample_name'])
            else:
                samples['good'].append(d['sample_name'])
                samples['runs'].append(d['run_name'])
        data = compile_sheet_data[vartype](ctrl, dbh, samples, tfields[vartype])
        if data and (data.get('horizon') or data.get('expected')):
            nums[vartype] = add_sheet_excel[vartype](workbook, wbformat, 
                            samples, data, fieldfunc=field2reportfield) 
#    if data.get('fusion') and (data['fusion'].get('expected') or data['fusion'].get('horizon')):
#        nums = add_fusion_sheet_excel(workbook, wbformat, samples['fusion'], 
#               data['fusion'], fieldfunc=field2reportfield) 
#    if data.get('cnv') and (data['cnv'].get('horizon') or data['cnv'].get('expected')):
#        nums = add_cnv_sheet_excel(workbook, wbformat, samples['cnv'], 
#               data['cnv'], fieldfunc=field2reportfield) 
    workbook.close()
    wb = openpyxl.load_workbook(outfile)
    wb.save(outfile)
    sys.stdout.flush()
    return nums

#----gui.py-------------------------------------------------------------------

class StampQC_App(wx.App):
    def __init__(self, dbhs, tinfos, controls, msg=None, **kwargs):
        self.dbh = dbhs
        self.tinfo = tinfos
        self.controls = controls
        self.msg = msg
        wx.App.__init__(self, kwargs)

    def OnInit(self):
        self.frame = StampFrame(self.dbh, self.tinfo, self.controls, 
                                msg=self.msg)
        self.frame.Show()
        self.SetTopWindow(self.frame)
        return True

class StampFrame(wx.Frame):
    def __init__(self, dbh, tinfo, controls, msg=None):
        wx.Frame.__init__(self, None, title="STAMP QC v{}".format(VERSION), 
                          size=(550,525))
        self.dbh = dbh
        self.tinfo = tinfo
        self.controls = controls
        ctrl_version = get_ctrl_version()
        self.ctrl_version = ' (STAMP {})'.format(ctrl_version) if \
                            ctrl_version else ''

        panel = wx.Panel(self)
        label = wx.StaticText(panel, -1, 
            "Drop TruQ3 or HD753 variant, fusion, or CNV reports here:")
        self.text = wx.TextCtrl(panel,-1, "",style=wx.TE_READONLY|
                                wx.TE_MULTILINE|wx.HSCROLL)
        button_print = wx.Button(panel, -1, "Print reports")
        print_tooltip = "Creates new variant reports with variants "+\
            "labelled expected, not expected or not found. New reports "+\
            "are named <Sample>.variant_report.checked.txt and saved "+\
            "in same folder as original report."
        button_print.SetToolTip(wx.ToolTip(print_tooltip))
        self.Bind(wx.EVT_BUTTON, self.PrintReports, button_print)
        button_save = wx.Button(panel, -1, "Update spreadsheets and DB")
        save_tooltip = "Update spreadsheet and database with data entered.\n"
        button_save.SetToolTip(wx.ToolTip(save_tooltip))
        self.Bind(wx.EVT_BUTTON, self.UpdateSpreadsheetAndDB, button_save)
        button_quit = wx.Button(panel, -1, "Quit", style=wx.BU_EXACTFIT)
        self.Bind(wx.EVT_BUTTON, self.OnCloseMe, button_quit)
        self.Bind(wx.EVT_CLOSE, self.OnCloseWindow)
        self.notebook = StampNotebook(panel, tinfo, controls, msg=msg)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(label, 0, wx.ALL, 5)
        sizer.Add(self.text, 1, wx.EXPAND|wx.ALL, 5)
        sizer.Add(self.notebook, 0, wx.EXPAND|wx.ALL, 5)

        button_sizer = wx.BoxSizer(wx.HORIZONTAL)
        button_sizer.Add(button_print, 0, wx.ALIGN_CENTER_VERTICAL)
        button_sizer.Add(button_save, 0, wx.ALIGN_CENTER_VERTICAL)
        button_sizer.AddStretchSpacer()
        button_sizer.Add(button_quit, 0, wx.ALIGN_CENTER_VERTICAL)
        sizer.Add(button_sizer, 0, wx.ALL|wx.EXPAND, 5)
        panel.SetSizer(sizer)

        dt = VariantReportDrop(self.text, self.notebook, tinfo)
        self.text.SetDropTarget(dt)

    def PrintReports(self, event):
        self.text.AppendText("\nPrinting reports:\n")
        if not self.notebook.results:
            self.text.AppendText("  No reports to process.\n\n")
            return
        for i, info in enumerate(self.notebook.results):
            if not info: continue
            entries = self.notebook.entries[i]
            sample = entries['sample'].GetValue()
            outfile = {}
            if 'file' in info:
                outfile['mutation'] = info['file'].replace('.txt','') +\
                                      ".checked.txt"
            if 'fusion_file' in info:
                outfile['fusion'] = info['fusion_file'].replace('.txt','') +\
                                    ".checked.txt"
            if 'cnv_file' in info:
                outfile['cnv'] = info['cnv_file'].replace('.txt','') +\
                                    ".checked.txt"
            for vartype in outfile:
                if not sample==info['sample']:
                    outfile[vartype] = outfile[vartype].replace(
                                           info['sample'], sample)
                self.text.AppendText("  "+outfile[vartype]+"\n")
            print_checked_file(info['vinfo'], self.tinfo[info['control']], 
                               outfile)
        self.text.AppendText("\n")

    def UpdateSpreadsheetAndDB(self, event):
        self.text.AppendText("\nUpdating data:\n")
        if not self.notebook.results:
            self.text.AppendText("  No data to save to db.\n")
        else:
            for i, info in enumerate(self.notebook.results):
                if not info: continue
                entries = self.notebook.entries[i]
                sample = info['vinfo'].sample = entries['sample'].GetValue()
                run = info['vinfo'].run = entries['run'].GetValue()
                if not run or not sample:
                    msg = "    {}: Not saved.".format(i)
                    if not run and not sample:
                        msg += "  Need run and sample\n"
                    elif not run:
                        msg += "  Need run name\n"
                    else:
                        msg += "  Need sample name\n"
                    self.text.AppendText(msg)
                    continue
                statusnum = entries['status'].GetSelection()
                status = entries['status'].GetString(statusnum)
                saved = info['vinfo'].save2db(status, force=True)
                if saved:
                    self.text.AppendText(
                        "        Saved {} data to db.\n".format(sample))
                else:
                    self.text.AppendText(
                        "        {} not saved to db.\n".format(sample))
            summ = []
            for ctrl in self.controls:
#                summ.append(ctrl+self.ctrl_version+'\n')
                summ.extend(self.tinfo[ctrl].db_summary())
                summ.append('\n')
            self.notebook.tabOne.ChangeMessage(''.join(summ))
        try:
            for ctrl in self.controls:
                self.text.AppendText("  Updating {} spreadsheet.\n".format(
                                     ctrl))
                res = generate_excel_spreadsheet(ctrl, self.dbh[ctrl], 
                  self.tinfo[ctrl].fields, REFS[ctrl]['SPREADSHEET'])
                counts = []
                for vartype, nums in sorted(res.items()):
                    counts.append("{} {}s".format(nums['num_variants'], vartype))
                numruns = res['mutation']['num_runs'] if res.get('mutation') else 0
                msg = "      {} ({} runs)".format(ctrl, numruns)
                if counts:
                    msg += ': '+', '.join(counts)
                self.text.AppendText(msg+'\n')
#                if res['failedsamples']:
#                    self.text.AppendText(
#                         "      Failed samples not included: {}\n".format(
#                         ", ".join(sorted(res['failedsamples']))))
        except Exception, e:
            self.text.AppendText("    ERROR: {}{}\n\n".format(
                                       type(e).__name__, e))
            raise
        self.text.AppendText("\n")

    def OnCloseMe(self, event):
        self.Close(True)

    def OnCloseWindow(self, event):
        self.Destroy()
        
class VariantReportDrop(wx.FileDropTarget):
    def __init__(self, window, notebook, tinfo):
        wx.FileDropTarget.__init__(self)
        self.window = window
        self.notebook = notebook
        self.tinfo = tinfo
        self.num_samples = 0

    def OnDropFiles(self, x, y, filenames):
        oldfiles = self.notebook.ReportFiles()
        oldsamples2files, oldbadfiles = group_files_by_sample(oldfiles)
        samples2files, badfiles = group_files_by_sample(filenames)
        if badfiles:
            for badfile in badfiles:
               self.window.AppendText("ERROR: "+badfile+'\n')
               self.window.AppendText("    Bad input.  This does not look" +\
                   " like a TruQ3 or HD753 variant or fusion report.\n")
        # check if sample data needs updating with new files or
        # skip if sample is only previously dropped files
        for sample, d in sorted(samples2files.items()):
            if sample in oldsamples2files:
                updatesample = False
                old_d = oldsamples2files[sample]
                for reporttype in ('v_report', 'f_report', 'c_report'):
                    if reporttype in d:
                        if reporttype in old_d and \
                           old_d[reporttype]==d[reporttype]:
                            continue
                        else:
                            updatesample=True
                    elif reporttype in old_d:
                        d[reporttype] = old_d[reporttype]
                        updatesample = True
                if updatesample:
                    self.notebook.DeletePageSample(sample)
                else: # no need to update
                    continue
            run = d['run']
            ctrl = d['control']
            self.num_samples += 1
            if not ctrl in self.tinfo:
                sys.exit("No truth data for {} in db\n".format(ctrl))
            try:
                vinfo = VariantSet(sample, run, ctrl, self.tinfo[ctrl])
                info = {'num': self.num_samples, 'vinfo': vinfo,
                        'control': ctrl, 'run': run, 'sample': sample }
                if 'v_report' in d:
                    info['file'] = d['v_report']
                    vinfo.add_variants(d['v_report'], 'mutation')
                    self.window.AppendText("Mutation file {}:    {}\n".format(
                        self.num_samples, info['file']))
                if 'f_report' in d:
                    info['fusion_file'] = d['f_report']
                    vinfo.add_variants(d['f_report'], 'fusion')
                    self.window.AppendText("Fusion file {}:    {}\n".format(
                        self.num_samples, info['fusion_file']))
                if 'c_report' in d:
                    info['cnv_file'] = d['c_report']
                    vinfo.add_variants(d['c_report'], 'cnv')
                    self.window.AppendText("CNV file {}:    {}\n".format(
                        self.num_samples, info['cnv_file']))
                summary = vinfo.compare_variants()
                info.update({'summary': summary, 
                             'status': summary['Status'],})
                title = "{}: {}".format(self.num_samples, sample)
                self.notebook.AddResultsTab(info, title=title)
#            except KeyError, e:
#                self.window.AppendText("    ERROR:  Bad file format.  " +\
#                    "This does not look like a variant or fusion report.\n")
            except Exception, e:
                self.window.AppendText("    ERROR: {} {}\n\n".format(
                                       type(e).__name__, e))
                raise

class StampNotebook(fnb.FlatNotebook):
    def __init__(self, parent, tinfo, controls, msg=None):
        fnb.FlatNotebook.__init__(self, parent, id=wx.ID_ANY, size=(500, 300),
            agwStyle=fnb.FNB_VC8|fnb.FNB_X_ON_TAB|fnb.FNB_NO_X_BUTTON|
            fnb.FNB_NAV_BUTTONS_WHEN_NEEDED)

        self.tabOne = TabPanel_Text(self, msg=msg)
        self.AddPage(self.tabOne, "DB content")
        self.results = ['',]
        self.entries = ['',]
        self.Bind(fnb.EVT_FLATNOTEBOOK_PAGE_CLOSING, self.OnTabClosing)
        self.Bind(fnb.EVT_FLATNOTEBOOK_PAGE_DROPPED, self.OnTabDrop)
        self.tinfo = tinfo
        self.controls = controls

    def AddResultsTab(self, info, title=None):
        if not title:
            num = info['num'] if 'num' in info else ''
            title = "Sample {} ({})".format(num, info['control'])
        newTab = TabPanel_Results(self, info)
        self.AddPage(newTab, title)
        numpages = self.GetPageCount()
        self.SetSelection(numpages-1)
        self.results.append(info)

    def OnTabClosing(self, event):
        selected = self.GetSelection()
        res = self.results.pop(selected)
        ent = self.entries.pop(selected)
        txt = self.GetPageText(selected)

    def OnTabDrop(self, event):
        selected = self.GetSelection()
        oldselected = event.GetOldSelection()
        res = self.results.pop(oldselected)
        ent = self.entries.pop(oldselected)
        self.results.insert(selected, res)
        self.entries.insert(selected, ent)

    def ReportFiles(self):
        """Return list of variant and fusion report files in notebook"""
        reports = []
        for info in self.results:
            if not info: continue
            if 'file' in info:
                reports.append(info['file'])
            if 'fusion_file' in info:
                reports.append(info['fusion_file'])
            if 'cnv_file' in info:
                reports.append(info['cnv_file'])
        return reports

    def DeletePageSample(self, sample):
        """Delete pages where sample is given sample"""
        numpages = 0
        for i, info in enumerate(self.results):
            if not info: continue
            if 'sample' in info and info['sample']==sample:
                self.SetSelection(i)
                self.DeletePage(i)
                self.SendSizeEvent()
                numpages += 1
        return numpages

class TabPanel_Text(wx.Panel):
    def __init__(self, parent, msg="\n\n\n\n"):
        wx.Panel.__init__(self, parent=parent, id=wx.ID_ANY)
        self.textWidget = wx.StaticText(self, -1, '\n'+msg, pos=(15,10))
#        font = wx.Font(8, wx.FONTFAMILY_TELETYPE, wx.FONTSTYLE_NORMAL,
#                       wx.FONTWEIGHT_NORMAL)
#        self.textWidget.SetFont(font)

    def ChangeMessage(self, msg):
        self.textWidget.Destroy()
        self.textWidget = wx.StaticText(self, -1, '\n'+msg)

class TabPanel_Results(wx.Panel):
    def __init__(self, parent, info):
        wx.Panel.__init__(self, parent=parent, id=wx.ID_ANY)

        runLabel = wx.StaticText(self, -1, "Run:")
        runEntry = wx.TextCtrl(self, -1, info['run'])
        sampleLabel = wx.StaticText(self, -1, "Sample:")
        sampleEntry = wx.TextCtrl(self, -1, info['sample'])
        statusLabel = wx.StaticText(self, -1, "Status:")
        statusEntry = wx.Choice(self, -1, choices=['PASS', 'FAIL'])
        statusEntry.SetSelection(0 if info['status']=='PASS' else 1)
        parent.entries.append({'run': runEntry, 'sample': sampleEntry,
                               'status': statusEntry})
        tag = parent.tinfo[info['control']].ctrl_version_tag
        infostr1 = "Control:  {}{}\n".format(info['control'], tag) 
        infostr2 = ''
        num_missing = 0
        for vartype in info['vinfo'].truthset.variant_types:
            if not vartype in info['summary']:
                continue
            summary = info['summary'][vartype]
            msg = 'All expected {}s found.'.format(vartype)
            if len(summary['notseen'])>0:
                num_missing += len(summary['notseen'])
                infostr2 += "Expected {} not found:{:5d}\n".format(vartype,
                      len(summary['notseen']))
            else:
                infostr2 += "All expected {}s found\n".format(vartype)
            infostr2 += '\n\n'
            varname = FORMAT_VARTYPE['format'][vartype]
            infostr1 += "Total {}s:{:9d}\n".format(varname, summary['Total'])\
            +"    Expected {}s:{:8d}\n".format(varname, summary['Expected'])+\
            "    Other {}s:{:4d}\n".format(varname, summary['Other'])
#        info2summ = "Missing {} expected variants\n".format(num_missing) \
#               if num_missing else 'All expected variants found.\n'
        infoText1 = wx.StaticText(self, -1, infostr1)
        infoText2 = wx.StaticText(self, -1, '\n\n'+infostr2)

        panelSizer = wx.BoxSizer(wx.VERTICAL)
        infoSizer = wx.BoxSizer(wx.HORIZONTAL)
        infoSizer.Add(infoText1, 1, wx.ALL, 8)
        infoSizer.Add(infoText2, 1, wx.EXPAND|wx.ALL, 8)
        entrySizer = wx.FlexGridSizer(cols=2, hgap=5, vgap=5)
        entrySizer.AddGrowableCol(1)
        entrySizer.Add(runLabel, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL)
        entrySizer.Add(runEntry, 0, wx.EXPAND)
        entrySizer.Add(sampleLabel, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL)
        entrySizer.Add(sampleEntry, 0, wx.EXPAND)
        entrySizer.Add(statusLabel, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL)
        entrySizer.Add(statusEntry, 0)
        panelSizer.Add(entrySizer, 0, wx.EXPAND|wx.ALL, 10)
        panelSizer.Add(infoSizer, 0, wx.ALIGN_LEFT)
        self.SetSizer(panelSizer)

def run_gui(dbhs, tinfos, msgs, controls):
    if not controls:
        sys.stderr.write("\nERROR: no control data found\n")
        time.sleep(5) 
        sys.exit()
    msg = '\n'.join(msgs)
    app = StampQC_App(dbhs, tinfos, controls, msg=msg)
    app.MainLoop()

#-----------------------------------------------------------------------------

if __name__=='__main__':
    descr = "Checks STAMP TruQ3 and HD753 variant and fusion report(s) "
    descr += " for expected variants."
    descr += " Creates new annotated variant report(s) in the same"
    descr += " directory unless otherwise specified."
    parser = ArgumentParser(description=descr)
    parser.add_argument("reports", nargs="*",
                        help="STAMP TruQ3 or HD753 variant report(s)")
    parser.add_argument("-o", "--outdir", 
                        help="Directory to save output file(s)")
    parser.add_argument("-s", "--status", default='PASS',
                        help="Status to use for all reports (default: PASS)")
    parser.add_argument("-t", "--text", default=False, action='store_true',
                        help="Print checked variant reports.")
    parser.add_argument("-x", "--excel", default=False, action='store_true',
                        help="Print Excel spreadsheet summarizing all data.")
    parser.add_argument("-d", "--debug", default=False, action='store_true',
                        help="Print extra messages")
    parser.add_argument("--datadir", default=DEFAULT_DATA_DIR,
                        help="Directory to find/save databases and "+\
                             "spreadsheets")
    parser.add_argument("--docsdir", default=DEFAULT_DOCS_DIR,
                        help="Directory to find truth files, and db schema")
    parser.add_argument("--safe", default=True, action='store_false',
                        dest="force",
                        help="Do not overwrite existing data in db.")

    args = parser.parse_args()
    dbh = {}
    tinfo = {}
    msgs = []
    # Use STAMP V2 data if V2 in name of script
    ctrl_version = get_ctrl_version()
    sys.stdout.write("Control version: {}\n".format(ctrl_version))
    check_references(args.docsdir, args.datadir, ctrl_version)
    controls = check_existing_dbs(args.datadir, ctrl_version)
    for ctrl in controls:
        dbh[ctrl] = check_db(ctrl)
        tinfo[ctrl] = TruthSet(ctrl, dbh[ctrl], ctrl_version)
        summary = tinfo[ctrl].db_summary()
        msgs.append(''.join(summary))
    sys.stdout.write('\n'.join(msgs))
    if len(args.reports)==0:
        run_gui(dbh, tinfo, msgs, controls)
    else:
        if not controls:
            sys.exit("\nERROR: no control data found\n")
        samples = {}
        samples2files, badfiles = group_files_by_sample(args.reports)
        outfile = {}
        for sample, d in sorted(samples2files.items()):
            run = d['run']
            ctrl = d['control']
            sys.stdout.write("\nSample: {}\tRun: {}\tControl: {}\n".format(
                             sample, run, ctrl))
            vinfo = VariantSet(sample, run, ctrl, tinfo[ctrl])
            if 'v_report' in d:
                outfile['mutation'] = d['v_report'].replace('.txt','')+\
                                      ".checked.txt"
                vinfo.add_variants(d['v_report'], 'mutation')
            if 'f_report' in d:
                outfile['fusion'] = d['f_report'].replace('.txt','')+\
                                      ".checked.txt"
                vinfo.add_variants(d['f_report'], 'fusion')
            if 'c_report' in d:
                outfile['cnv'] = d['c_report'].replace('.txt','')+\
                                      ".checked.txt"
                vinfo.add_variants(d['c_report'], 'cnv')
            summary = vinfo.compare_variants(args.status)
            vinfo.save2db(summary['Status'], args.force)
            if args.text:
                if args.outdir:
                    for vartype in outfile:
                        outfile[vartype] = os.path.join(args.outdir, 
                                           os.path.basename(outfile[vartype]))
                print_checked_file(vinfo, tinfo[ctrl], outfile)
        for ctrl in controls:
            generate_excel_spreadsheet(ctrl, dbh[ctrl], tinfo[ctrl].fields, 
                                       REFS[ctrl]['SPREADSHEET'])
            dbh[ctrl].close()


